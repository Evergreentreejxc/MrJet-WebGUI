# main.py (Corrected Final Version)

import subprocess
import time
import streamlit as st
import os
import uuid
import json
import re

# --- 基礎 URL 設定 ---
BASE_URL = "https://missav.ws/"

# --- 基本設定 ---
st.set_page_config(
    page_title="MrJet WebGUI",
    page_icon="random",
    layout="centered",
    initial_sidebar_state="auto",
)

static_dir = os.path.join(os.getcwd(), "static")
queue_file = os.path.join(os.getcwd(), "download_queue.json")
if not os.path.exists(static_dir):
    os.makedirs(static_dir)

# --- 佇列管理 ---
def load_queue():
    if os.path.exists(queue_file):
        with open(queue_file, "r") as f:
            return json.load(f)
    return {}

def save_queue(queue):
    with open(queue_file, "w") as f:
        json.dump(queue, f, indent=4)

if "download_queue" not in st.session_state:
    st.session_state.download_queue = load_queue()

# --- 核心功能函式 ---
def download_file(video_url_input):
    log_id = uuid.uuid4()
    log_file_path = os.path.join(static_dir, f"{log_id}.log")
    command = f"mrjet --url \"{video_url_input}\" --output_dir mrjet_output"
    with open(log_file_path, "w", encoding='utf-8') as log_file:
        subprocess.Popen(
            command, stdout=log_file, stderr=subprocess.STDOUT, text=True, shell=True
        )
    log_link = f"[logfile](./app/static/{log_id}.log)"
    return ":orange-background[Downloading]", log_link

def check_task_status_and_progress(url, log_link):
    if not log_link:
        return ":gray-background[Not Started]", 0.0, 0.0, 0.0, ""

    log_file = log_link.split("/static/")[1].split(")")[0]
    log_path = os.path.join(static_dir, log_file)
    
    verify_p, download_p, build_p = 0.0, 0.0, 0.0
    status = ":orange-background[Downloading]"

    if not os.path.exists(log_path):
        return ":red-background[Failed - Log Missing]", 0.0, 0.0, 0.0, log_link

    try:
        with open(log_path, "r", encoding='utf-8', errors='ignore') as f:
            content = f.read()

        verify_matches = re.findall(r"Verify\s*:\s*\[[^\]]*\]\s*([0-9\.]+)%", content)
        if verify_matches: verify_p = float(verify_matches[-1]) / 100.0

        download_matches = re.findall(r"Download\s*:\s*\[[^\]]*\]\s*([0-9\.]+)%", content)
        if download_matches: download_p = float(download_matches[-1]) / 100.0

        build_matches = re.findall(r"Build\s*:\s*\[[^\]]*\]\s*([0-9\.]+)%", content)
        if build_matches: build_p = float(build_matches[-1]) / 100.0
        
        if build_p >= 1.0:
            status, verify_p, download_p, build_p = ":green-background[Success]", 1.0, 1.0, 1.0
        elif "Error" in content or "ERROR:" in content:
            status = ":red-background[Failed]"

    except Exception as e:
        print(f"Error processing log file {log_path}: {e}")
        pass
    
    return status, verify_p, download_p, build_p, log_link

# --- Streamlit 介面 ---
st.title("MrJet WebGUI")

# --- 【已修正】text_input 呼叫 ---
# 移除了第一個多餘的參數 "url_input"，只保留 label 關鍵字參數
st.text_input(
    label="Enter URL or AV Number (e.g., waaa-361)",
    placeholder="waaa-361",
    key="url_input_val"
)

add_col, start_col = st.columns((1, 5))
with add_col:
    add_button = st.button("Add", use_container_width=True)
with start_col:
    start_button = st.button("Start All Queued", use_container_width=True)

# --- 狀態更新邏輯 ---
for url, task in st.session_state.download_queue.items():
    if task["Status"] not in [":green-background[Success]"]:
        status, p_v, p_d, p_b, log = check_task_status_and_progress(url, task["Log"])
        st.session_state.download_queue[url].update({
            "Status": status, "Progress_Verify": p_v, "Progress_Download": p_d, "Progress_Build": p_b, "Log": log
        })

save_queue(st.session_state.download_queue)

# --- 佇列顯示 ---
st.markdown("---")
if not st.session_state.download_queue:
    st.info("The download queue is empty.")
else:
    for url, task in st.session_state.download_queue.items():
        main_cols = st.columns((5, 3, 2))
        main_cols[0].markdown(f'**ID:** [{task["DisplayName"]}]({url})')
        main_cols[1].text(f'Created: {task["Created Date"]}')
        main_cols[2].markdown(f'**{task["Status"]}** {task["Log"]}')

        st.text("Verify:")
        st.progress(task["Progress_Verify"])
        st.text("Download:")
        st.progress(task["Progress_Download"])
        st.text("Build:")
        st.progress(task["Progress_Build"])
        st.markdown("---")

# --- 按鈕邏輯 ---
if add_button and st.session_state.url_input_val:
    user_input = st.session_state.url_input_val.strip()
    
    if not user_input.startswith("http"):
        full_url = f"{BASE_URL}{user_input}"
        display_name = user_input
    else:
        full_url = user_input
        display_name = user_input.split('/')[-1] or user_input
        
    if full_url not in st.session_state.download_queue:
        st.session_state.download_queue[full_url] = {
            "DisplayName": display_name,
            "Created Date": time.strftime("%Y-%m-%d %H:%M:%S"),
            "Status": ":gray-background[Not Started]",
            "Log": "",
            "Progress_Verify": 0.0, "Progress_Download": 0.0, "Progress_Build": 0.0,
        }
        save_queue(st.session_state.download_queue)
        st.rerun()
    else:
        st.warning("This item is already in the queue.")

# --- 其他部分 ---
if start_button:
    for url, task in st.session_state.download_queue.items():
        if task["Status"] == ":gray-background[Not Started]":
            status, log_link = download_file(url)
            st.session_state.download_queue[url]["Status"] = status
            st.session_state.download_queue[url]["Log"] = log_link
    save_queue(st.session_state.download_queue)
    st.rerun()

with st.expander("Utils", expanded=False):
    if st.button("Clean finished tasks"):
        urls_to_remove = [url for url, task in st.session_state.download_queue.items() if task["Status"] not in [":orange-background[Downloading]", ":gray-background[Not Started]"]]
        for url in urls_to_remove:
            task = st.session_state.download_queue[url]
            if task["Log"]:
                log_file = task["Log"].split("/static/")[1].split(")")[0]
                log_path = os.path.join(static_dir, log_file)
                if os.path.exists(log_path): os.remove(log_path)
            del st.session_state.download_queue[url]
        save_queue(st.session_state.download_queue)
        st.rerun()

is_downloading = any(":orange-background[Downloading]" in task["Status"] for task in st.session_state.download_queue.values())
if is_downloading:
    time.sleep(2)
    st.rerun()